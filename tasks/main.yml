---
# Copyright (C) 2018-2020 Robert Wimmer
# Copyright (C)      2020 Robin Schneider <ypid@riseup.net>
# SPDX-License-Identifier: GPL-3.0-or-later

- import_role:
    name: 'secret'

- name: Assert that inventory configuration is valid
  assert:
    that:
      - '(wireguard__config_target == "ansible_controller" and wireguard__secret_authority == "ansible_controller") or wireguard__config_target != "ansible_controller"'
  run_once: True
  delegate_to: 'localhost'

# Installing and load WireGuard [[[1
- include_tasks: "{{ item }}"
  vars:
    params:
      files:
        - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
        - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_release }}.yml"
        - "setup-{{ ansible_distribution|lower }}.yml"
        - "setup-{{ ansible_os_family|lower }}.yml"
  loop: '{{ q("first_found", params, errors="ignore") }}'
  when: wireguard__config_target == "host"

- name: Install patched version of wg-quick
  copy:
    src: 'usr/local/bin/wg-quick'
    dest: '{{ ansible_local.fhs.bin|d("/usr/local/bin") + "/wg-quick" }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags:
    - wg-install
  when: wireguard__config_target == "host"

- name: Install wg-validate-config
  copy:
    src: 'usr/local/lib/wg-validate-config'
    dest: '{{ wireguard__config_validator }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags:
    - wg-install
  when: wireguard__config_target == "host"

- name: Enable WireGuard kernel module
  modprobe:
    name: wireguard
    state: present
  register: wireguard__register_module_enabled
  until:  wireguard__register_module_enabled is succeeded
  retries: 10
  delay: 10
  failed_when: wireguard__register_module_enabled is failure
  when: wireguard__config_target == "host" and ansible_os_family == 'Darwin'
  tags:
    - wg-install

# Prepare WireGuard configuration directory [[[1
- name: Create WireGuard configuration directory
  file:
    dest: '{{ wireguard_remote_directory }}'
    state: directory
    mode: 0700
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-config

- name: Create WireGuard remote keys directory
  file:
    path: '{{ wireguard__keys_directory }}'
    state: 'directory'
    mode: '0700'
  when: wireguard__key_templating == "file"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-generate-keys
    - wg-config

# Private key handling on Ansible controller [[[1
- block:
  - name: Create secret directory on Ansible controller
    file:
      path: '{{ wireguard__secret_directory }}'
      state: 'directory'
      mode: '0700'
    delegate_to: "localhost"
    run_once: True
    tags:
      - wg-config

  - name: Generate WireGuard private key on Ansible controller
    shell: 'wg genkey > {{ (wireguard__secret_directory + "/" + item + ".privkey") | quote }}'
    args:
      creates: '{{ wireguard__secret_directory + "/" + item + ".privkey" }}'
    delegate_to: "localhost"
    run_once: True
    loop: '{{ wireguard__peers + [inventory_hostname] }}'
    tags:
      - wg-config

  - name: Read WireGuard private key from Ansible controller
    slurp:
      src: '{{ wireguard__secret_directory + "/" + inventory_hostname + ".privkey" }}'
    delegate_to: "localhost"
    register: wireguard__register_private_key

  - name: Set private key fact from Ansible controller
    set_fact:
      wireguard__fact_private_key: '{{ (wireguard__register_private_key["content"] | b64decode).strip() }}'
  when: wireguard__secret_authority == "ansible_controller"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'

# Private key handling on remote [[[1
- block:
  - name: Get WireGuard private key on remote
    shell: |
      set -o nounset -o pipefail -o errexit &&
      wg-quick strip-and-eval {{ wireguard_interface | quote }} | sed --quiet 's/^PrivateKey\s*=\s*//p;'
    args:
      executable: 'bash'
    register: wireguard__register_private_key

  - name: Generate WireGuard private key on remote
    command: "wg genkey"
    register: wireguard__register_private_key
    changed_when: False
    when: wireguard__register_config.rc|d(1) != 0
    tags:
      - wg-generate-keys

  - name: Set private key fact
    set_fact:
      wireguard__fact_private_key: "{{ wireguard__register_private_key.stdout }}"
  when: wireguard__secret_authority == "host"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'

# Save/remove private key from Ansible controller [[[1
- name: Save WireGuard private key on Ansible controller
  copy:
    content: |
      {{ wireguard__fact_private_key }}
    dest: '{{ wireguard__secret_directory }}/{{ inventory_hostname }}.privkey'
  delegate_to: "localhost"
  no_log: '{{ debops__no_log | d(True) }}'
  when: wireguard__secret_authority == "ansible_controller"
  tags:
    - wg-config

- name: Remove WireGuard private key from Ansible controller
  file:
    dest: '{{ wireguard__secret_directory }}/{{ inventory_hostname }}.privkey'
    state: absent
  when: wireguard__secret_authority == "host"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-config

# Public-private key handling on remote [[[1
- name: Save WireGuard private key as separate file
  copy:
    content: |
      {{ wireguard__fact_private_key }}
    dest: "{{ wireguard__keys_directory }}/{{ wireguard_interface }}.privkey"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  no_log: '{{ debops__no_log | d(True) }}'
  when: wireguard__key_templating == "file"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-config
  notify:
    - Reload WireGuard interface

- name: Derive WireGuard public key
  command: "wg pubkey"
  args:
    stdin: "{{ wireguard__fact_private_key }}"
  register: wireguard__register_public_key
  changed_when: False
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-config

- name: Set public key fact
  set_fact:
    wireguard__fact_public_key: '{{ wireguard__register_public_key.stdout }}'
  tags:
    - wg-config

# PSK handling [[[1
- set_fact:
    wireguard__combos: '{{ wireguard__peers | product([inventory_hostname]) | map("sort") | map("join", ",") | list }}'
  tags:
    - wg-config
    - test

- name: Generate WireGuard PSKs
  shell: 'wg genpsk > {{ (wireguard__secret_directory + "/" + item + ".psk") | quote }}'
  args:
    creates: '{{ wireguard__secret_directory + "/" + item + ".psk" }}'
  delegate_to: "localhost"
  loop: '{{ wireguard__combos }}'
  tags:
    - wg-config

- block:
  - name: Read WireGuard PSK files from Ansible controller
    slurp:
      src: '{{ wireguard__secret_directory + "/" + item + ".psk" }}'
    delegate_to: "localhost"
    loop: '{{ wireguard__combos }}'
    register: wireguard__register_private_key

  - name:
    set_fact:
      wireguard__fact_psks: |-
        {% set fact = {} %}
        {% for result in wireguard__register_private_key.results %}
        {%   set _ = fact.update({
            (result['item'].split(",") | difference([inventory_hostname]) | first): (result['content'] | b64decode).strip(),
        }) %}
        {% endfor %}
        {{ fact }}
  when: wireguard__secret_authority == "ansible_controller"
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'

- name: Download PSKs
  copy:
    src: '{{ wireguard__secret_directory + "/" + item + ".psk" }}'
    dest: "{{ wireguard__keys_directory }}/{{ wireguard_interface }},{{ item }}.psk"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  loop: '{{ wireguard__combos }}'
  when: wireguard__config_target == "host"
  tags:
    - wg-config

# Configuration [[[1
- name: Generate WireGuard configuration file
  template:
    src: etc/wireguard/wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
    validate: '{{ wireguard__config_validator }} --file %s'
  when: wireguard__config_target == "host"
  tags:
    - wg-config
  notify:
    - Reload WireGuard interface

- name: Generate WireGuard configuration file on Ansible controller
  template:
    src: 'etc/wireguard/wg.conf.j2'
    dest: '{{ wireguard_remote_directory + "/" + wireguard_interface + ".conf" }}'
    validate: '{{ role_path }}/files/usr/local/lib/wg-validate-config --file %s'
  when: wireguard__config_target == "ansible_controller" and (platform not in ["opnsense", "pfsense"])
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  tags:
    - wg-config

- name: Generate WireGuard configuration file on Ansible controller for OPNsense
  template:
    src: 'conf/config_{{ item }}_part.xml.j2'
    dest: '{{ wireguard_remote_directory + "/" + wireguard_interface + "_" + item + ".xml" }}'
    validate: 'xmllint --noout %s'
  when: wireguard__config_target == "ansible_controller" and (platform in ["opnsense", "pfsense"])
  delegate_to: '{{ "localhost" if (wireguard__config_target == "ansible_controller") else omit }}'
  with_items:
    - server
    - client
  tags:
    - wg-config

- name: Ensure legacy reload-module-on-update is absent
  file:
    dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
    state: absent
  when: wireguard__config_target == "host"
  tags:
    - wg-config

# Service [[[1
- name: Create directory for drop-in file for wg-quick@.service
  file:
    dest: "/etc/systemd/system/wg-quick@.service.d"
    state: directory
    mode: 0755
  when: wireguard__config_target == "host"

- name: Create systemd drop-in file for wg-quick@.service
  template:
    src: "etc/systemd/system/wg-quick@.service.d/local.conf.j2"
    dest: "/etc/systemd/system/wg-quick@.service.d/local.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  when: wireguard__config_target == "host"

- name: Start and enable WireGuard service
  service:
    daemon_reload: True
    name: "wg-quick@{{ wireguard_interface }}"
    state: started
    enabled: True
  when: (wireguard__config_target == "host" and ansible_os_family != 'Darwin')

# Save WireGuard local facts [[[1
- name: Make sure that Ansible local facts directory exists
  file:
    path: '{{ (wireguard__controller_host_dir_path
               if (wireguard__config_target == "ansible_controller")
               else "") + "/etc/ansible/facts.d" }}'
    state: 'directory'
    owner: '{{ wireguard__controller_host_owner
               if (wireguard__config_target == "ansible_controller")
               else "root" }}'
    group: '{{ wireguard__controller_host_group
               if (wireguard__config_target == "ansible_controller")
               else "root" }}'
    mode: '{{ wireguard__controller_host_mode
              if (wireguard__config_target == "ansible_controller")
              else "0755" }}'
  when: wireguard__config_target == "host"

- name: Save WireGuard local facts
  template:
    src: '{{ "etc/ansible/facts.d/" +
             ("wireguard_static.fact.j2"
              if (wireguard__config_target == "ansible_controller")
              else "wireguard.fact.j2") }}'
    dest: '{{ (wireguard__controller_host_dir_path
               if (wireguard__config_target == "ansible_controller")
               else "") + "/etc/ansible/facts.d/wireguard.fact" }}'
    owner: '{{ wireguard__controller_host_owner
               if (wireguard__config_target == "ansible_controller")
               else "root" }}'
    group: '{{ wireguard__controller_host_group
               if (wireguard__config_target == "ansible_controller")
               else "root" }}'
    mode: '{{ "0644"
              if (wireguard__config_target == "ansible_controller")
              else "0755" }}'
  register: wireguard__register_facts
  when: wireguard__config_target == "host"

- name: Update Ansible facts if they were modified
  setup:
    fact_path: '{{ (wireguard__controller_host_dir_path + "/etc/ansible/facts.d")
                   if (wireguard__config_target == "ansible_controller")
                   else omit }}'
  when: (wireguard__config_target == "host" and wireguard__register_facts is changed)
